name: CI/CD
on:
  workflow_dispatch:
  push:
    branches-ignore: [main, e2e]

concurrency:
  group: tests
  cancel-in-progress: true

jobs:

  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch  
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
          fetch-depth: 0
      - name: Check changes on api
        id: check-api
        uses: tj-actions/changed-files@v10
        with:
          files: |
            api
      - name: Check changes on web
        id: check-web
        uses: tj-actions/changed-files@v10
        with:
          files: |
            web
    outputs:
      api: ${{ steps.check-api.outputs.any_changed }}
      web: ${{ steps.check-web.outputs.any_changed }}

  api-tests:
<<<<<<< HEAD
<<<<<<< HEAD
    name: Api Unit + Integration
=======
    name: Api CI Tests
>>>>>>> uncomment code
=======
    name: Api Unit + Integration
>>>>>>> trigger whole workflow
    needs: [detect-changes]
    if: needs.detect-changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup PostgreSQL
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.CI_TESTS_DB_NAME }}"
          sudo -u postgres psql -c "CREATE USER ${{ secrets.CI_TESTS_DB_USER }} WITH ENCRYPTED PASSWORD '${{ secrets.CI_TESTS_DB_PASS }}'"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.CI_TESTS_DB_NAME }} TO ${{ secrets.CI_TESTS_DB_USER }}"          
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'maven'
      - name: Run Unit + Integration Tests
        working-directory: ./api
        run: 'mvn clean install'

  web-tests:
<<<<<<< HEAD
<<<<<<< HEAD
    name: Web Unit + Integration
=======
    name: Web CI Tests
>>>>>>> uncomment code
=======
    name: Web Unit + Integration
>>>>>>> trigger whole workflow
    needs: [detect-changes]
    if: needs.detect-changes.outputs.web == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout feature branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'
          cache-dependency-path: ./web/package-lock.json
      - name: Build
        working-directory: ./web
        run: npm ci
      - name: Run Tests
        working-directory: ./web
        run: npm run test
   
  deploy-vercel:
<<<<<<< HEAD
<<<<<<< HEAD
    name: Deploy Web to Vercel
=======
    name: Deploy web to Vercel
>>>>>>> uncomment code
=======
    name: Deploy Web to Vercel
>>>>>>> trigger whole workflow
    runs-on: ubuntu-latest
    needs: [web-tests]
    environment:
      name: web TESTING
      url: ${{ steps.deploy.outputs.preview-url }}
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: "Deploy to vercel dev"
        id: deploy
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }} 
          vercel-args: '-b REACT_APP_API_URL=https://offguard-testing.herokuapp.com'
      - name: Update vercel url in secrets
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'VERCEL_TESTING_URL'
          value: ${{ steps.deploy.outputs.preview-url }}
          token: ${{ secrets.PAT }}

  deploy-heroku:
<<<<<<< HEAD
<<<<<<< HEAD
    name: Deploy Api to Heroku
=======
    name: Deploy api to Heroku
>>>>>>> uncomment code
=======
    name: Deploy Api to Heroku
>>>>>>> trigger whole workflow
    runs-on: ubuntu-latest
    needs: [api-tests]
    environment:
      name: api TESTING
      url: https://offguard-testing.herokuapp.com
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'maven'
      - name: Build Backend
        working-directory: ./api
        run: mvn clean install -DskipTests
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          appdir: api
          branch: ${{ steps.extract-branch.outputs.branch }}
        env:
          # note: "HD_" is needed to specify what to include in the deployed heroku app.
          #       However, it is only needed to differentiate from other environment variables.
          #       The "HD_" string will be stripped when the app starts. 
          #       Therefore you need to use "FRONTEND_URL" when accessing from inside the app.  
          HD_FRONTEND_URL: ${{ secrets.VERCEL_TESTING_URL }}

  e2e-tests:
    name:  End-to-End Tests
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-heroku]
    # either one succeeds -> (needs.deploy-vercel.result == 'success' || steps.deploy-heroku.result == 'success')
    # AND -> &&
    # no failure -> (needs.deploy-vercel.result != 'failure' && steps.deploy-heroku.result != 'failure')
    if: always() && (needs.deploy-vercel.result == 'success' || needs.deploy-heroku.result == 'success') && (needs.deploy-vercel.result != 'failure' && needs.deploy-heroku.result != 'failure')
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'
          cache-dependency-path: ./e2e/package-lock.json
      - name: Build
        working-directory: ./e2e
        run: npm i
      - name: Run End-to-End Tests
        uses: cypress-io/github-action@v2
        env:
          CYPRESS_FRONTEND_URL: ${{ secrets.VERCEL_TESTING_URL }}
        with:
          wait-on: ${{ secrets.VERCEL_TESTING_URL }}
          wait-on-timeout: 30
          browser: chrome
          headless: true
          working-directory: ./e2e

  deploy-vercel-staging:
<<<<<<< HEAD
<<<<<<< HEAD
    name: Web STAGING
=======
    name: Vercel STAGING
>>>>>>> uncomment code
=======
    name: Web STAGING
>>>>>>> trigger whole workflow
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    environment:
      name: web STAGING
      url: ${{ steps.deploy.outputs.preview-url }}
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: "Deploy to vercel staging"
        id: deploy
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }} 
          vercel-args: '-b REACT_APP_API_URL=https://offguard-staging.herokuapp.com'
      - name: Update vercel url in secrets
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'VERCEL_STAGING_URL'
          value: ${{ steps.deploy.outputs.preview-url }}
          token: ${{ secrets.PAT }}

<<<<<<< HEAD
<<<<<<< HEAD
  deploy-heroku-staging:
    name: Api STAGING
=======
  deploy-heroku-staging:
<<<<<<< HEAD
    name: Heroku STAGING
>>>>>>> uncomment code
=======
    name: Api STAGING
>>>>>>> trigger whole workflow
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    environment:
      name: api STAGING
      url: https://offguard-staging.herokuapp.com
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'maven'
      - name: Build Backend
        working-directory: ./api
        run: mvn clean install -DskipTests
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          appdir: api
          branch: ${{ steps.extract-branch.outputs.branch }}
        env:
          # note: "HD_" is needed to specify what to include in the deployed heroku app.
          #       However, it is only needed to differentiate from other environment variables.
          #       The "HD_" string will be stripped when the app starts. 
          #       Therefore you need to use "FRONTEND_URL" when accessing from inside the app.  
          HD_FRONTEND_URL: ${{ secrets.VERCEL_STAGING_URL }}

=======
>>>>>>> init deploy production
  create-pull-request:
    name: "Create pull request"
    runs-on: ubuntu-latest
    needs: [deploy-heroku-staging, deploy-vercel-staging]
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
<<<<<<< HEAD
<<<<<<< HEAD
      - name: pull-request
        uses: repo-sync/pull-request@v2
        with:
<<<<<<< HEAD
          destination_branch: "main"                      
          pr_title: "[PR] main <- ${{ steps.extract-branch.outputs.branch }}"
          pr_body: |
            Automated PR:
            - close <issue_#_link>
          pr_assignee: "johnshift"
          pr_label: "pull request"
          github_token: ${{ secrets.GITHUB_TOKEN }}
=======
          fetch-depth: 0
=======
>>>>>>> simplified checkout
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.PAT }}
          commit-message: "[PR] main <- ${{ steps.extract-branch.outputs.branch }}"
          # base: ${{ steps.extract-branch.outputs.branch }}
          # branch: main
          branch: ${{ steps.extract-branch.outputs.branch }}
          title: "[PR] main <- ${{ steps.extract-branch.outputs.branch }}"
          body: |
            Automated PR
          labels: |
            pull request
          assignees: johnshift
>>>>>>> removed base in pull request action
=======
      - name: pull-request
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: "main"                      
          pr_title: "[PR] main <- ${{ steps.extract-branch.outputs.branch }}"
          pr_body: |
            Automated PR:
            - close <issue_#_link>
          pr_assignee: "johnshift"
          pr_label: "pull request"
<<<<<<< HEAD
          github_token: ${{ secrets.GITHUB_TOKEN }}

<<<<<<< HEAD
      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v3
      #   with:
      #     token: ${{ secrets.PAT }}
      #     commit-message: "[PR] main <- ${{ steps.extract-branch.outputs.branch }}"
      #     # base: ${{ steps.extract-branch.outputs.branch }}
      #     # branch: main
      #     branch: ${{ steps.extract-branch.outputs.branch }}
      #     title: 
      #     body: |
      #       Automated PR
      #     labels: |
      #       pull request
      #     assignees: johnshift
>>>>>>> switched actions to repo-sync
=======
  deploy-vercel-production:
    name: Vercel PRODUCTION
    runs-on: ubuntu-latest
    needs: [create-pull-request]
    environment:
      name: web PRODUCTION
      url: ${{ steps.deploy.outputs.preview-url }}
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: "Deploy to vercel production"
        id: deploy
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }} 
          vercel-args: '--prod -b REACT_APP_API_URL=https://offguard.herokuapp.com'
      - name: Update vercel url in secrets
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'VERCEL_PRODUCTION_URL'
          value: ${{ steps.deploy.outputs.preview-url }}
          token: ${{ secrets.PAT }}

  deploy-heroku-production:
    name: Heroku PRODUCTION
    runs-on: ubuntu-latest
    # needs: [deploy-vercel-production]
    needs: [create-pull-request]
    environment:
      name: api PRODUCTION
      url: https://offguard.herokuapp.com
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'maven'
      - name: Build Backend
        working-directory: ./api
        run: mvn clean install -DskipTests
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          appdir: api
          branch: ${{ steps.extract-branch.outputs.branch }}
        env:
          # note: "HD_" is needed to specify what to include in the deployed heroku app.
          #       However, it is only needed to differentiate from other environment variables.
          #       The "HD_" string will be stripped when the app starts. 
          #       Therefore you need to use "FRONTEND_URL" when accessing from inside the app.  
          HD_FRONTEND_URL: ${{ secrets.VERCEL_PRODUCTION_URL }}
>>>>>>> init deploy production
=======
          github_token: ${{ secrets.GITHUB_TOKEN }}
>>>>>>> cleanup cicd.yml
