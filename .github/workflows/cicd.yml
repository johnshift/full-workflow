name: CI/CD
on:
  workflow_dispatch:
  push:
    branches-ignore: [main, e2e]

concurrency:
  group: tests
  cancel-in-progress: true

jobs:

  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch  
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}
          fetch-depth: 0
      
      - name: Run changed-files with defaults on the dir1
        id: c-api
        uses: tj-actions/changed-files@v10
        with:
          files: |
            api

      - name: Run changed-files with defaults on the dir1
        id: c-web
        uses: tj-actions/changed-files@v10
        with:
          files: |
            web

      # - name: Run changed-files with defaults on the dir1
      #   id: c-web
      #   uses: tj-actions/changed-files@v10
      #   with:
      #     path: web
        
      - name: Echo all changed/modified files
        run: echo "changed/modified = `${{ steps.c-api.outputs.all_changed_and_modified_files }}`"

      - name: Echo any_changed files
        run: echo "any_changed = `${{ steps.c-api.outputs.any_changed }}`"

      - name: Echo contains api
        run: echo "contains api = `${{ contains(steps.c-api.outputs.all_changed_and_modified_files, '^api/') }}`"

      - name: Echo contains api
        run: echo "contains api = `${{ contains(steps.c-api.outputs.all_changed_and_modified_files, '^web/') }}`"

      # - name: Echo any_change in web
      #   run: echo "web any_change = `${{ steps.c-web.outputs.any_changed }}`"


      

    #   - uses: dorny/paths-filter@v2
    #     id: filter-changes
    #     with:
    #       base: ${{ steps.extract_branch.outputs.branch }}
    #       filters: |
    #         api:
    #           - './api/**'
    #         web:
    #           - './web/**'
    #   - name: check if api changed
    #     run: echo "api_change = `${{ steps.filter-changes.outputs.api }}`"
    #   - name: check if web changed
    #     run: echo "web_change = `${{ steps.filter-changes.outputs.web }}`"
    # outputs:
    #   api: ${{ steps.filter-changes.outputs.api }}
    #   web: ${{ steps.filter-changes.outputs.web }}

  # api-tests:
  #   name: Api CI Tests
  #   needs: [detect-changes]
  #   if: needs.detect-changes.outputs.api == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Extract branch name
  #       shell: bash
  #       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       id: extract_branch
        
  #     - name: Checkout API Branch
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ steps.extract_branch.outputs.branch }}

  #     - name: Setup PostgreSQL
  #       run: |
  #         sudo service postgresql start
  #         sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.CI_TESTS_DB_NAME }}"
  #         sudo -u postgres psql -c "CREATE USER ${{ secrets.CI_TESTS_DB_USER }} WITH ENCRYPTED PASSWORD '${{ secrets.CI_TESTS_DB_PASS }}'"
  #         sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.CI_TESTS_DB_NAME }} TO ${{ secrets.CI_TESTS_DB_USER }}"          

  #     - name: Setup Java
  #       uses: actions/setup-java@v2
  #       with:
  #         distribution: 'adopt'
  #         java-version: '11'
  #         cache: 'maven'

  #     - name: Run Unit + Integration Tests
  #       working-directory: ./api
  #       run: 'mvn clean install'

  # web-tests:
  #   name: Web CI Tests
  #   needs: [detect-changes]
  #   if: needs.detect-changes.outputs.web == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Extract branch name
  #       shell: bash
  #       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       id: extract_branch

  #     - name: Checkout feature branch
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ steps.extract_branch.outputs.branch }}

  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         cache: 'npm'
  #         cache-dependency-path: ./web/package-lock.json

  #     - name: Build
  #       working-directory: ./web
  #       run: npm ci

  #     - name: Run Tests
  #       working-directory: ./web
  #       run: npm run test
   
  # deploy-vercel:
  #   name: Deploy web to Vercel
  #   runs-on: ubuntu-latest
  #   needs: [web-tests]
  #   environment:
  #     name: web TESTING
  #     url: ${{ steps.deploy.outputs.preview-url }}
  #   steps:
  #     - name: Extract branch name
  #       shell: bash
  #       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       id: extract_branch
        
  #     - name: Checkout API Branch
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ steps.extract_branch.outputs.branch }}
  
  #     - name: "Deploy to vercel dev"
  #       id: deploy
  #       uses: amondnet/vercel-action@v20
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
  #         scope: ${{ secrets.VERCEL_ORG_ID }} 
  #         vercel-args: '-b REACT_APP_API_URL=${{ secrets.API_URL }}'
  #   outputs:
  #     preview-url: ${{ steps.deploy.outputs.preview-url }}

  # deploy-heroku:
  #   name: Deploy api to Heroku
  #   runs-on: ubuntu-latest
  #   needs: [api-tests]
  #   environment:
  #     name: web TESTING
  #     url: ${{ steps.set-url.outputs.url }}
  #   steps:
  #     - name: Extract branch name
  #       shell: bash
  #       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       id: extract_branch
        
  #     - name: Checkout API Branch
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ steps.extract_branch.outputs.branch }}
  #     - name: Setup Java
  #       uses: actions/setup-java@v2
  #       with:
  #         distribution: 'adopt'
  #         java-version: '11'
  #         cache: 'maven'
  #     - name: Build Backend
  #       working-directory: ./api
  #       run: mvn clean install -DskipTests
  #     - name: Deploy to Heroku
  #       uses: akhileshns/heroku-deploy@v3.12.12
  #       with:
  #         heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
  #         heroku_email: ${{ secrets.HEROKU_EMAIL }}
  #         heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
  #       # env:
  #       #   # note: "HD_" is needed to specify what to include in the deployed heroku app.
  #       #   #       However, it is only needed to differentiate from other environment variables.
  #       #   #       The "HD_" string will be stripped when the app starts. 
  #       #   #       Therefore you need to use "FRONTEND_URL" when accessing from inside the app.  
  #       #   HD_FRONTEND_URL: ${{ needs.deploy-vercel.outputs.preview-url }}
